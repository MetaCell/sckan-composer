//IMPORTS:
const selectors = require('./selectors');
const puppeteer = require("puppeteer");

// INFO
const USERNAME = process.env.TEST_USERNAME 
const PASSWORD = process.env.TEST_PASSWORD
const baseURL = 'https://composer.sckan.dev.metacell.us/'



//FUNCTIONS AND CONSTANTS

function getTimestamp() {
    const now = new Date();
    const day = now.getDate();
    const month = now.toLocaleString('default', { month: 'short' });
    const year = now.getFullYear();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();
    const formattedDate = `${day}${month}${year}_${hours}h${minutes}m${seconds}s`;
    return formattedDate
}

const maxPmidNumber = 99999999;
const randomPmid = Math.floor(Math.random() * maxPmidNumber) + 1;

const maxPmcidNumber = 999999999;
const randomPmcid = Math.floor(Math.random() * maxPmcidNumber) + 1;

const prefix = "10.";
const maxDoiLength = 16;
const characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

let doi = prefix;
while (doi.length < maxDoiLength) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    doi += characters[randomIndex];
}

const currentTime = getTimestamp()

const article_title = `Automated Testing Article - ${currentTime}`
const sentence = `QA - ${currentTime} - Sentence generated by Automated Testing`
const knowledge_statement_1 = `QA_KS_1 - ${currentTime}`
const provenances_1 = 'https://doi.org/google.com'
const species_1 = 'homo sapiens'
const apinatomy_model_name_1 = 'PTcell'
const additional_info_1 = 'Additional Information for KS 1'
const tags = 'Important'
const note = 'Statement List - Distillation - Note'
const path_builder_origin_ = 'abducens motor nuclei'
const path_builder_axon = 'AXON'
const path_builder_via = '10n'
const path_builder_destination = 'adrenal cortex'
const path_builder_axon_terminal = 'AXON-T'



//TESTS:

jest.setTimeout(60000 * 2);
let page;
let browser;


describe('End to End Tests', () => {

    beforeAll(async () => {

        browser = await puppeteer.launch({
            args: [
                '--no-sandbox', '--disable-setuid-sandbox', '--bail',
            ],
            // headless: 'new',
            headless: false,
            defaultViewport: {
                width: 1600,
                height: 1000,
            },
            // slowMo: 30
        });


        page = await browser.newPage();
        await console.log(
            "Checking page",
            baseURL
        );
        await console.log('Starting tests ...')

        await page.goto(baseURL, { waitUntil: 'domcontentloaded' })
        const pageTitle = await page.title();
        console.log(pageTitle);
        expect(pageTitle).toBe('SCKAN Composer')
    });

    afterAll(async () => {

        await browser.close()
    })

    describe('Login Flow', () => {

        // (shouldSkipLoginTest ? it.skip : it)('HomePage', async () => {
        it('Home Page', async () => {
            console.log('Homepage')
            await page.waitForSelector(selectors.LOGIN_PAGE, { timeout: 60000 })
            await page.waitForSelector(selectors.COOKIE_MODAL, { timeout: 60000 })
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { timeout: 60000 })
            await page.click(selectors.ACCEPT_COOKIES)
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { hidden: true });
            console.log('Cookies accepted')

        });

        // (shouldSkipLoginTest ? it.skip : it)('Login', async () => {
        it('Login', async () => {
            console.log('Logging in ...');
            console.log('Testing user: ' + USERNAME)
    
            await page.waitForSelector(selectors.USERNAME, { hidden: false});
            await page.waitForTimeout(1000)
            await page.type(selectors.USERNAME, USERNAME);
            await page.type(selectors.PASSWORD, PASSWORD);
            await page.waitForSelector(selectors.SIGN_IN_BUTTON, { hidden: false });
            await page.click(selectors.SIGN_IN_BUTTON);
            await page.waitForSelector(selectors.SEARCH_ICON, { hidden: false });
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
    
            console.log('Logged In');
        });
    })

    describe('Logout Flow', () => {

        it('Logout', async () => {
            console.log('Logging out ...')

            await page.waitForSelector(selectors.LOGOUT)
            await page.click(selectors.LOGOUT)
            await page.waitForSelector(selectors.LOGIN_PAGE, { timeout: 60000 })
            expect(page.url()).toContain('orcid.org/signin')
            console.log('User logged out')
        })
    })

})