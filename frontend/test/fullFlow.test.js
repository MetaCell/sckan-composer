//IMPORTS:
const puppeteer = require("puppeteer");


const baseURL = process.env.TEST_URL || 'https://composer.sckan.dev.metacell.us/'

const USERNAME = 'simao@metacell.us'
const PASSWORD = 'Pokemon9897!'

function getTimestamp() {
    const now = new Date();
    const day = now.getDate();
    const month = now.toLocaleString('default', { month: 'short' });
    const year = now.getFullYear();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();
    const formattedDate = `${day}${month}${year}_${hours}h${minutes}m${seconds}s`;
    return formattedDate
}

const maxPmidNumber = 99999999;
const randomPmid = Math.floor(Math.random() * maxPmidNumber) + 1;

const maxPmcidNumber = 999999999;
const randomPmcid = Math.floor(Math.random() * maxPmcidNumber) + 1;

const prefix = "10.";
const maxDoiLength = 16;
const characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

let doi = prefix;
while (doi.length < maxDoiLength) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    doi += characters[randomIndex];
}

const currentTime = getTimestamp()

const article_title = `Automated Testing Article - ${currentTime}`
const sentence = `QA - ${currentTime} - Sentence generated by Automated Testing`

const knowledge_statement_1 = `QA_KS_1 - ${currentTime}`
const provenances_1 = 'https://doi.org/google.com'
const species_1 = 'human'
const apinatomy_model_name_1 = 'PTcell'
const additional_info_1 = 'Additional Information for KS 1'
const tags = 'Important'
const note = 'Statement List - Distillation - Note'
const path_builder_origin_ = 'abducens motor nuclei'
const path_builder_axon = 'AXON'
const path_builder_via = '10n'
const path_builder_destination = 'adrenal cortex'
const path_builder_axon_terminal = 'AXON-T'



//TESTS:

jest.setTimeout(60000 * 2);
let page;
let browser;
describe('End to End Tests', () => {

    beforeAll(async () => {

        browser = await puppeteer.launch({
            args: [
                "--no-sandbox",
            ],
            headless: false,
            defaultViewport: {
                width: 1600,
                height: 1000,
            },
        });


        page = await browser.newPage();
        await console.log(
            "Checking page",
            baseURL
        );
        await console.log('Starting tests ...')

        // page.on("pageerror", err => {
        //     console.log('ERROR')
        //     throw new Error(`Page error: ${err.toString()}`);
        // });

        await page.goto(baseURL, { waitUntil: 'domcontentloaded' })
    });

    afterAll(async () => {

        await browser.close()
    })

    it('HomePage', async () => {

        await console.log(page.url())
        const pageTitle = await page.title();
        console.log(pageTitle);
        expect(pageTitle).toBe('SCKAN Composer')
        await page.waitForSelector('.mat-form-field-infix', { timeout: 60000 })
    })

    it('Login', async () => {

        console.log('Logging in ...')

        await page.waitForSelector('input[formcontrolname="username"]', { timeout: 60000 })
        await page.type('input[formcontrolname="username"]', USERNAME)
        await page.type('input[formcontrolname="password"]', PASSWORD)
        await page.click('#signin-button')
        await page.waitForSelector('svg[data-testid="SearchIcon"]')

        console.log('Logged In')

    })

    it('Add Record', async () => {
        console.log('Adding record ...')

        await page.click('button.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary')
        await page.waitForSelector('input[placeholder="Enter Article Title"]')
        await page.click('div:has(> input[placeholder="Enter Article Title"]')
        await page.type('div:has(> input[placeholder="Enter Article Title"]', `${article_title}`)
        await page.waitForTimeout(3000)
        await page.click('div:has(> input[placeholder="Enter PMID"]')
        await page.type('div:has(> input[placeholder="Enter PMID"]', `${randomPmid}`)
        await page.waitForTimeout(3000)
        await page.click('div:has(> input[placeholder="Enter PMCID"]')
        await page.type('div:has(> input[placeholder="Enter PMCID"]', `${randomPmcid}`)
        await page.waitForTimeout(3000)
        await page.click('div:has(> input[placeholder="Enter DOI"]')
        await page.type('div:has(> input[placeholder="Enter DOI"]', `${doi}`)
        await page.waitForTimeout(3000)
        await page.click('div:has(> textarea[placeholder="Enter the sentence"]')
        await page.type('div:has(> textarea[placeholder="Enter the sentence"]', `${sentence}`)
        await page.waitForTimeout(3000)

        await page.waitForSelector('button[type="submit"][tabindex="0"]')
        await page.click('button[type="submit"][tabindex="0"]')

        await page.waitForSelector('h3.MuiTypography-root.MuiTypography-h3')

        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("Open")

        console.log('Record successfully added')

    })


    it('Create 1st Knowledge Statement', async () => {
        console.log('Creating Knowledge Statement ...')

        await page.waitForTimeout(3000)
        await page.waitForSelector('button.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.MuiButton-fullWidth.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.MuiButton-fullWidth')
        await page.click('button.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.MuiButton-fullWidth.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.MuiButton-fullWidth')
        await page.waitForSelector('div:has(> input[placeholder="Select Species"]', { timeout: 6000 })
        
        // Knowledge Statement
        await page.click('div:has(> textarea[placeholder="Enter Knowledge Statement"]')
        await page.type('div:has(> textarea[placeholder="Enter Knowledge Statement"]', knowledge_statement_1)
        await page.waitForTimeout(3000)
        
        //Provenance
        await page.click('div:has(> input[placeholder="Enter Provenances (Press Enter to add a Provenance)"]')
        await page.type('div:has(> input[placeholder="Enter Provenances (Press Enter to add a Provenance)"]', provenances_1)
        await page.keyboard.press('Enter')
        await page.waitForTimeout(3000)
        
        //Species
        await page.click('div:has(> input[placeholder="Select Species"]')
        await page.type('div:has(> input[placeholder="Select Species"]', species_1)
        await page.keyboard.press('ArrowDown');
        await page.keyboard.press('Enter')
        await page.waitForTimeout(3000)
        
        //Phenotype
        const dropdown_buttons = await page.$$('div.MuiSelect-select.MuiSelect-standard.MuiInputBase-input.MuiOutlinedInput-input')
        await dropdown_buttons[0].click()

        await page.evaluate(() => {
            [...document.querySelectorAll('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')].find(element => element.innerText === 'Parasympathetic Pre-ganglionic').click();
        });
        await page.click('div:has(> input[placeholder="Select Species"]')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(4000)
        
        //Laterality
        await page.waitForSelector('span:has(> input[id="root_laterality-0"]')
        await page.click('span:has(> input[id="root_laterality-0"]')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)
       
        //Projection
        await page.waitForSelector('span:has(> input[id="root_projection-0"]')
        await page.click('span:has(> input[id="root_projection-0"]')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)
        
        // Circuit Type
        await page.waitForSelector('span:has(> input[id="root_circuit_type-0"]')
        await page.click('span:has(> input[id="root_circuit_type-0"]')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)
        
        // Sex
        await dropdown_buttons[1].click()
        await page.evaluate(() => {
            [...document.querySelectorAll('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')].find(element => element.innerText === 'Male').click();
        });
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)

        // Apinatomy Model Name
        await page.click('div:has(> input[placeholder="Enter Apinatomay Model Name"]')
        await page.type('div:has(> input[placeholder="Enter Apinatomay Model Name"]', apinatomy_model_name_1)
        await page.waitForTimeout(3000)

        // Additional Information
        await page.click('div:has(> textarea[placeholder="Enter additional information on the knowledge statement"]')
        await page.type('div:has(> textarea[placeholder="Enter additional information on the knowledge statement"]', additional_info_1)
        await page.waitForTimeout(3000)

        console.log('Knowledge Statement created')
    })


    it('Change status -> To Be Reviewed', async () => {
        console.log('Changing Status ...')


        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("To Be Reviewed")

        console.log('Status Changed')

    })


    it('Search for created Record', async () => {
        console.log('Searching for created Record ...')

        await page.waitForTimeout(3000)
        await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected')
        const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
        await sidebar_buttons[0].click()
        await page.waitForSelector('svg[data-testid="SearchIcon"]')
        await page.waitForSelector('div:has(> input[placeholder="Search for Sentences"]')
        await page.click('div:has(> input[placeholder="Search for Sentences"]')
        await page.waitForTimeout(3000)
        await page.type('div:has(> input[placeholder="Search for Sentences"]', `${article_title}`)
        await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
        await page.waitForTimeout(6000)
        const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
        expect(searched_records_count).toBe(1)

        await page.waitForSelector('div[data-rowindex="0"][role = "row"]')
        await page.click('div[data-rowindex="0"][role = "row"]')

        await page.waitForSelector('h5.MuiTypography-root.MuiTypography-h5')

        console.log('Record found')
    })

    it('Set status as Compose Now', async () => {
        console.log('Changing Status ...')
        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("Compose Now")
        console.log('Status Changed')
    })

    it('Search for the Knowledge Statement in the Statements List page', async () => {
        console.log('Searching for the created Knowledge Statement ...')
        await page.waitForTimeout(3000)
        await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')
        const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
        await sidebar_buttons[1].click()
        await page.waitForSelector('svg[data-testid="SearchIcon"]')
        await page.waitForSelector('div:has(> input[placeholder="Search for Knowledge Statements"]')
        await page.click('div:has(> input[placeholder="Search for Knowledge Statements"]')
        await page.waitForTimeout(3000)
        await page.type('div:has(> input[placeholder="Search for Knowledge Statements"]', `${knowledge_statement_1}`)
        await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
        await page.waitForTimeout(6000)
        const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
        expect(searched_records_count).toBe(1)

        await page.waitForSelector('div[data-rowindex="0"][role = "row"]')
        await page.click('div[data-rowindex="0"][role = "row"]')

        await page.waitForSelector('h5.MuiTypography-root.MuiTypography-h5')
        console.log('Statement found')
    })

    it('Distillation - add tags and notes', async () => {
        console.log('Adding Tags and Notes ...')
        // Tags
        await page.click('div:has(> input[placeholder="Select Tags"]')
        await page.type('div:has(> input[placeholder="Select Tags"]', tags)
        await page.keyboard.press('ArrowDown');
        await page.keyboard.press('Enter')
        await page.waitForTimeout(3000)

        // Notes
        await page.click('div:has(> textarea[placeholder="Write your note"]')
        await page.type('div:has(> textarea[placeholder="Write your note"]', note)
        await page.waitForTimeout(3000)
        await page.click('button[label= "Send"]')
        await page.waitForTimeout(3000)

        const history = await page.$$eval('h6.MuiTypography-root.MuiTypography-subtitle2', history => {
            return history.map(history => history.innerText)
        })
        expect(history[0]).toContain(note)

        console.log('Tags and Notes added')
    })

    it('Set status as Connection Missing', async () => {
        console.log('Changing Status ...')
        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("Connection Missing")
        console.log('Status Changed')
    })

    it('Set status as Curate', async () => {
        console.log('Changing Status ...')
        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("Curated")
        console.log('Status Changed')
    })

    it('Fill Proofing', async () => {

        console.log('Filling Proofing section ...')
        await page.click('button[role="tab"][aria-selected="false"]')
        await page.waitForTimeout(3000)
        
        //Origin
        await page.waitForSelector('div:has(> input[placeholder="Select Origin"]')
        await page.click('div:has(> input[placeholder="Select Origin"]')
        await page.type('div:has(> input[placeholder="Select Origin"]', path_builder_origin_)
        await page.waitForTimeout(3000)
        await page.keyboard.press('ArrowDown');
        await page.keyboard.press('Enter')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(5000)

        //Vias
        await page.click('button.MuiButtonBase-root.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium')
        await page.waitForSelector('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl:has(> div.MuiSelect-select.MuiSelect-standard.MuiInputBase-input.MuiOutlinedInput-input');
        await page.waitForTimeout(3000)

        const not_specified_buttons = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl:has(> div.MuiSelect-select.MuiSelect-standard.MuiInputBase-input.MuiOutlinedInput-input');
        await not_specified_buttons[0].click()
        await page.waitForSelector(`li[data-value= "${path_builder_axon}"]`)
        await page.click(`li[data-value= "${path_builder_axon}"]`)
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)

        await page.waitForSelector('div:has(> input[placeholder="Select Via"]')
        await page.click('div:has(> input[placeholder="Select Via"]')
        await page.type('div:has(> input[placeholder="Select Via"]', path_builder_via)
        await page.waitForTimeout(3000)
        await page.keyboard.press('ArrowDown');
        await page.keyboard.press('Enter')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)

        //Destination
        await not_specified_buttons[1].click()
        await not_specified_buttons[1].type(path_builder_axon_terminal)
        await page.click(`li[data-value= "${path_builder_axon_terminal}"]`)
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)

        await page.waitForSelector('div:has(> input[placeholder="Select Destination"]')
        await page.click('div:has(> input[placeholder="Select Destination"]')
        await page.type('div:has(> input[placeholder="Select Destination"]', path_builder_destination)
        await page.waitForTimeout(3000)
        await page.keyboard.press('ArrowDown');
        await page.keyboard.press('Enter')
        await page.waitForTimeout('span[role="progressbar"]', { timeout: 5000, hidden: false });
        await page.waitForTimeout('span[role="progressbar"]', { hidden: true });
        await page.waitForTimeout(3000)

        console.log('Proofing Section filled')

    })

    it('Check Values and Statement Preview', async () => {
        console.log('Checking Values and Statement Preview ...')
        
        //Check Statement Preview 
        await page.waitForSelector('rect.nsewdrag.drag')
        await page.waitForSelector('h5.MuiTypography-root.MuiTypography-h5 + p.MuiTypography-root.MuiTypography-body1')
        const journey = await page.$$eval('h5.MuiTypography-root.MuiTypography-h5 + p.MuiTypography-root.MuiTypography-body1', journey => {
            return journey.map(journey => journey.innerText)
        })
        expect(journey).toContain(`${path_builder_origin_} to ${path_builder_destination} via ${path_builder_via}`)

        //Check values
        await page.waitForSelector(`input[value= "${path_builder_origin_}"]`)
        await page.waitForSelector(`input[value= "${path_builder_via}"]`)
        await page.waitForSelector(`input[value= "${path_builder_axon}"]`)
        await page.waitForSelector(`input[value= "${path_builder_axon_terminal}"]`)
        await page.waitForSelector(`input[value= "${path_builder_destination}"]`)

        console.log('Values and Statement Preview correct')
    })

    it('Set status as To be Reviewed', async () => {
        console.log('Changing Status ...')
        
        await page.waitForSelector('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("To Be Reviewed")
        console.log('Status Changed')
    })

    it('Set status as NPO Approved', async () => {
        console.log('Changing Status ...')
        
        await page.waitForSelector('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.click('button[aria-label="select merge strategy"]')
        await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')
        await page.evaluate(() => {
            [...document.querySelectorAll('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')].find(element => element.innerText === 'NPO approved').click();
        });

        await page.click('div.MuiButtonGroup-root.MuiButtonGroup-contained')
        await page.waitForTimeout(1000)
        const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
            return status.map(status => status.innerText)
        })
        expect(sentence_status).toContain("Npo Approved")
        console.log('Status Changed')
    })


    it('Logout', async () => {
        console.log('Logging out ...')
        
        await page.waitForSelector('button[aria-label="logout"]')
        await page.click('button[aria-label="logout"]')
        await page.waitForSelector('.mat-form-field-infix', { timeout: 60000 })
        expect(page.url()).toContain('orcid.org/signin')
        console.log('User logged out')
    })





})