//IMPORTS:
const selectors = require('./selectors');
const puppeteer = require("puppeteer");

// INFO
const USERNAME = process.env.USERNAME 
const PASSWORD = process.env.PASSWORD 
const baseURL = 'https://composer.sckan.dev.metacell.us/'



//FUNCTIONS AND CONSTANTS

function getTimestamp() {
    const now = new Date();
    const day = now.getDate();
    const month = now.toLocaleString('default', { month: 'short' });
    const year = now.getFullYear();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();
    const formattedDate = `${day}${month}${year}_${hours}h${minutes}m${seconds}s`;
    return formattedDate
}

const maxPmidNumber = 99999999;
const randomPmid = Math.floor(Math.random() * maxPmidNumber) + 1;

const maxPmcidNumber = 999999999;
const randomPmcid = Math.floor(Math.random() * maxPmcidNumber) + 1;

const prefix = "10.";
const maxDoiLength = 16;
const characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

let doi = prefix;
while (doi.length < maxDoiLength) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    doi += characters[randomIndex];
}

const currentTime = getTimestamp()

const article_title = `Automated Testing Article - ${currentTime}`
const sentence = `QA - ${currentTime} - Sentence generated by Automated Testing`
const knowledge_statement_1 = `QA_KS_1 - ${currentTime}`
const provenances_1 = 'https://doi.org/google.com'
const species_1 = 'homo sapiens'
const apinatomy_model_name_1 = 'PTcell'
const additional_info_1 = 'Additional Information for KS 1'
const tags = 'Important'
const note = 'Statement List - Distillation - Note'
const path_builder_origin_ = 'abducens motor nuclei'
const path_builder_axon = 'AXON'
const path_builder_via = '10n'
const path_builder_destination = 'adrenal cortex'
const path_builder_axon_terminal = 'AXON-T'



//TESTS:

jest.setTimeout(60000 * 2);
let page;
let browser;


describe('End to End Tests', () => {

    beforeAll(async () => {

        browser = await puppeteer.launch({
            args: [
                '--no-sandbox', '--disable-setuid-sandbox',
            ],
            headless: 'new',
            // headless: false,
            defaultViewport: {
                width: 1600,
                height: 1000,
            },
            // slowMo: 30
        });


        page = await browser.newPage();
        await console.log(
            "Checking page",
            baseURL
        );
        await console.log('Starting tests ...')

        await page.goto(baseURL, { waitUntil: 'domcontentloaded' })
        const pageTitle = await page.title();
        console.log(pageTitle);
        expect(pageTitle).toBe('SCKAN Composer')
    });

    afterAll(async () => {

        await browser.close()
    })

    describe('Login Flow', () => {

        // (shouldSkipLoginTest ? it.skip : it)('HomePage', async () => {
        it('Home Page', async () => {
            console.log('Homepage')
            await page.waitForSelector(selectors.LOGIN_PAGE, { timeout: 60000 })
            await page.waitForSelector(selectors.COOKIE_MODAL, { timeout: 60000 })
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { timeout: 60000 })
            await page.click(selectors.ACCEPT_COOKIES)
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { hidden: true });
            console.log('Cookies accepted')

        });

        // (shouldSkipLoginTest ? it.skip : it)('Login', async () => {
        it('Login', async () => {
            console.log('Logging in ...');
            console.log('Testing user: ' + USERNAME)
    
            await page.waitForSelector(selectors.USERNAME, { timeout: 60000 });
            await page.type(selectors.USERNAME, USERNAME);
            await page.type(selectors.PASSWORD, PASSWORD);
            await page.waitForSelector(selectors.SIGN_IN_BUTTON, { hidden: false });
            await page.click(selectors.SIGN_IN_BUTTON);
            await page.waitForSelector(selectors.SEARCH_ICON, { hidden: false });
    
            console.log('Logged In');
        });
    })

    describe('Sentence List', () => {

        it('Add Record', async () => {
            console.log('Adding record ...')

            await page.waitForSelector(selectors.ADD_RECORD, {hidden:false})
            await page.click(selectors.ADD_RECORD)
            await page.waitForSelector(selectors.ARTICLE_LABEL, {hidden:false})
            await page.click(selectors.ARTICLE_FIELD)
            await page.type(selectors.ARTICLE_FIELD, `${article_title}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.PMID_FIELD)
            await page.type(selectors.PMID_FIELD, `${randomPmid}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.PMCID_FIELD)
            await page.type(selectors.PMCID_FIELD, `${randomPmcid}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.DOI_FIELD)
            await page.type(selectors.DOI_FIELD, `${doi}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.SENTENCE_FIELD)
            await page.type(selectors.SENTENCE_FIELD, `${sentence}`)
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.CREATE_SENTENCE, {hidden:false})
            await page.click(selectors.CREATE_SENTENCE)

            await page.waitForSelector(selectors.SENTENCE_DETAILS_TITLE, {hidden:false})
            await page.waitForTimeout(3000)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText)
            })
            expect(sentence_status).toContain("Open")

            console.log('Record successfully added')

        })


        it('Create 1st Knowledge Statement', async () => {
            console.log('Creating Knowledge Statement ...')

            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.ADD_KNOWLEDGE_STATEMENT, {hidden:false})
            await page.click(selectors.ADD_KNOWLEDGE_STATEMENT)

            // Knowledge Statement
            await page.waitForSelector(selectors.KS_FIELD, { timeout: 6000 })
            await page.click(selectors.KS_FIELD)
            await page.type(selectors.KS_FIELD, knowledge_statement_1)

            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)

            //Provenance
            await page.waitForSelector(selectors.PROVENANCE_FIELD, {hidden:false})
            await page.click(selectors.PROVENANCE_FIELD)
            await page.type(selectors.PROVENANCE_FIELD, provenances_1)
            await page.keyboard.press('Enter')
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)

        })

        it('Add Species to KS', async () => {

            //Species
            await page.waitForSelector(selectors.SPECIES_FIELD, {hidden:false})
            await page.click(selectors.SPECIES_FIELD)
            // await page.type(selectors.SPECIES_FIELD, species_1)
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Phenotype to KS', async () => {

            //Phenotype
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[3].click()
            // await page.waitForSelector('ul > li[data-value="1"]')
            // await page.click('ul > li[data-value="1"]')
            // await page.waitForSelector('div:has(> input[value="1"]')
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Projection phenotype to KS', async () => {

            //Projection Phenotype
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[4].click()
            // await page.waitForSelector('ul > li[data-value="RIGHT"]')
            // await page.click('ul > li[data-value="RIGHT"]')
            // await page.waitForSelector('div:has(> input[value="RIGHT"]')
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Laterality to KS', async () => {
            //Laterality
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[5].click()
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Projection Laterality to KS', async () => {
            //Projection laterality
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[6].click()
            // await page.waitForSelector('ul > li[data-value="BI"]')
            // await page.click('ul > li[data-value="BI"]')
            // await page.waitForSelector('div:has(> input[value="BI"]')
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Circuit Type to KS', async () => {
            // Circuit Type
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[7].click()
            // await page.waitForSelector('ul > li[data-value="MOTOR"]')
            // await page.click('ul > li[data-value="MOTOR"]')
            // await page.waitForSelector('div:has(> input[value="MOTOR"]')
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })


        it('Add Sex to KS', async () => {
            // Sex 
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[8].click()
            // await page.waitForSelector('ul > li[data-value="2"]')
            // await page.click('ul > li[data-value="2"]')
            // await page.waitForSelector('div:has(> input[value="2"]')
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Apinatomy model to KS', async () => {

            // Apinatomy Model Name
            await page.waitForSelector(selectors.APINATOMY_MODEL, {hidden:false})
            await page.click(selectors.APINATOMY_MODEL)
            await page.type(selectors.APINATOMY_MODEL, apinatomy_model_name_1)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
        })

        it('Add Additional info to KS', async () => {

            // Additional Information
            await page.click(selectors.ADDITIONAL_INFORMATION)
            await page.type(selectors.ADDITIONAL_INFORMATION, additional_info_1)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)



            console.log('Knowledge Statement created')

        })


        it('Change status -> Ready to Compose', async () => {
            console.log('Changing Status ...')

            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]')
            await page.waitForSelector('#split-button-menu', {hidden:false})
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(100)
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(1000)


            console.log('Status Changed')

        })


        it('Search for created Record', async () => {
            console.log('Searching for created Record ...')

            await page.waitForTimeout(3000)
            await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected')
            const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
            await sidebar_buttons[0].click()
            await page.waitForSelector(selectors.SEARCH_ICON)
            await page.waitForSelector(selectors.SEARCH_BAR, {hidden:false})
            await page.click(selectors.SEARCH_BAR)
            await page.waitForTimeout(1000)
            await page.type(selectors.SEARCH_BAR, `${article_title}`)
            await page.waitForTimeout(3000)
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            // await page.waitForTimeout(6000)
            const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
            expect(searched_records_count).toBe(1)

            await page.waitForSelector(selectors.TABLE_ROW)
            await page.click(selectors.TABLE_ROW)

            await page.waitForSelector(selectors.SENTENCE_PAGE)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase())
            })
            expect(sentence_status).toContain("ready to compose")

            console.log('Record found')
        })

        it('Set status as Compose Now', async () => {
            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]', {hidden:false})
            await page.waitForSelector('#split-button-menu')
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(100)
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(1000)

            console.log('Status Changed')
        })
    })

    describe('Statements List', () => {

        it('Search for the Knowledge Statement in the Statements List page', async () => {
            console.log('Searching for the created Knowledge Statement ...')
            await page.waitForTimeout(3000)
            await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')
            const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
            await sidebar_buttons[1].click()
            await page.waitForSelector(selectors.SEARCH_ICON)
            await page.waitForSelector(selectors.SEARCH_FOR_KS, {hidden:false})
            await page.click(selectors.SEARCH_FOR_KS)
            await page.waitForTimeout(3000)
            await page.type(selectors.SEARCH_FOR_KS, `${knowledge_statement_1}`)
            await page.waitForTimeout(100)
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            await page.waitForTimeout(6000)
            const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
            expect(searched_records_count).toBe(1)

            await page.waitForSelector(selectors.TABLE_ROW)
            await page.click(selectors.TABLE_ROW)

            await page.waitForSelector(selectors.SENTENCE_PAGE)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase())
            })
            expect(sentence_status).toContain("compose now")

            console.log('Statement found')
        })

        it.skip('Distillation - add tags and notes', async () => {
            console.log('Adding Tags and Notes ...')
            // Tags
            await page.waitForSelector(selectors.TAGS_FIELD, {hidden:false})
            await page.click(selectors.TAGS_FIELD)
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(3000)

            // Notes
            await page.click(selectors.NOTES_FIELD)
            await page.type(selectors.NOTES_FIELD, note)
            await page.waitForTimeout(3000)
            await page.click(selectors.SEND_BUTTON)
            await page.waitForTimeout(3000)

            const history = await page.$$eval('h6.MuiTypography-root.MuiTypography-subtitle2', history => {
                return history.map(history => history.innerText)
            })
            expect(history[0]).toContain(note)

            console.log('Tags and Notes added')
        })


        it('Set status as In progress', async () => {
            console.log('Changing Status ...')
            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(3000)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase())
            })
            expect(sentence_status).toContain("in progress")
            console.log('Status Changed')
        })

        it('Add via elements to path builder', async () => {

            console.log('Adding elements to path builder ...')
            await page.waitForSelector('button[role="tab"][aria-selected="false"]')
            await page.click('button[role="tab"][aria-selected="false"]')
            await page.waitForTimeout(3000)

            //Add a Via element
            await page.waitForSelector(selectors.ADD_BUTTON_PATH_BUILDER)
            const add_button = await page.$$('button.MuiButtonBase-root.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium')
            await add_button[0].click()
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForSelector(selectors.ADDED_ELEMENT)
            const added_via = await page.$$eval('div.MuiSelect-select.MuiSelect-standard.MuiInputBase-input.MuiOutlinedInput-input.MuiInputBase-inputAdornedStart', elements => elements.length);
            expect(added_via).toBe(1)

        })

        it('Add destination element to path builder', async () => {

            //Add a Destination element
            await page.waitForSelector(selectors.ADD_BUTTON_PATH_BUILDER, {hidden:false})
            const add_destination_button = await page.$$('button.MuiButtonBase-root.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium.MuiButton-root.MuiButton-text.MuiButton-textInfo.MuiButton-sizeMedium.MuiButton-textSizeMedium')
            await add_destination_button[1].click()
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForSelector(selectors.ADDED_ELEMENT)
            const added_destination = await page.$$eval('div.MuiSelect-select.MuiSelect-standard.MuiInputBase-input.MuiOutlinedInput-input.MuiInputBase-inputAdornedStart', elements => elements.length);
            expect(added_destination).toBe(2)

            console.log('Elements added')
        })

        it('Add Origin', async () => {
            console.log('Adding Origin ...')

            //Origin 
            await page.waitForSelector(selectors.ORIGIN_FIELD)
            await page.click(selectors.ORIGIN_FIELD)
            await page.waitForSelector(selectors.SEARCH_ORIGINS)
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.waitForTimeout(3000)
            const all_origins = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            expect(all_origins).toBeGreaterThan(1)
            await page.click(selectors.SEARCH_ORIGINS)
            await page.click('#simple-popper ul li')

            // await page.type(selectors.SEARCH_ORIGINS, path_builder_origin_)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            // await page.waitForSelector(selectors.CHECKBOX_ITEM)
            // const searched_origins = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            // expect(searched_origins).toBe(1)
            // await page.waitForSelector(selectors.FIRST_SEARCHED_ELEMENT)
            // await page.click(selectors.FIRST_SEARCHED_ELEMENT)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR)
            await page.click(selectors.BIOTECH_ICON_SELECTOR)

            // await page.click(selectors.ORIGIN_FIELD)
            await page.waitForTimeout(3000)
            const added_origin = await page.$$eval('form[class="origins"] > div > div  > div  > div  > div  > div  > div > span > div ', status => {
                return status.map(status => status.innerText)
            })
            expect(added_origin).not.toHaveLength(0)
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });

            console.log('Origin added')
        })

        it('Add Vias', async () => {

            console.log('Adding Vias ...')
            await page.waitForTimeout(3000)

            //Vias
            await page.waitForSelector(selectors.VIAS_FROM_FIELD)
            await page.click(selectors.VIAS_FROM_FIELD)
            await page.waitForSelector('div:has(> input[placeholder="Search for connections"]')
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.click('div:has(> input[placeholder="Search for connections"]')
            await page.click('#simple-popper ul li')
            await page.waitForTimeout(1000)
            await page.click('#simple-popper ul li')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR)
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForTimeout(3000)

            // await page.waitForFunction((selector, expectedText) => {
            //     const elements = document.querySelectorAll(selector);
            //     return Array.from(elements, element => element.innerText).includes(expectedText);
            // }, { timeout: 15000 }, 'form[class="vias"] > div > div > div > div > div > div > tr > td.MuiTableCell-root.MuiTableCell-sizeMedium.inLineForm:nth-child(2) > div > div > div > div:nth-child(4) > div > div > div > span > div', path_builder_origin_);

            const added_via_from_field = await page.$$eval('form[class="vias"] > div > div > div > div > div > div > tr > td.MuiTableCell-root.MuiTableCell-sizeMedium.inLineForm:nth-child(2) > div > div > div > div:nth-child(4) > div > div > div > span > div', status => {
                return status.map(status => status.innerText);
            });
            expect(added_via_from_field).not.toHaveLength(0)

            await page.waitForSelector(selectors.VIAS_FIELD)
            await page.click(selectors.VIAS_FIELD)
            await page.waitForSelector(selectors.SEARCH_FOR_VIAS)
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.waitForTimeout(3000)
            const all_vias = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            expect(all_vias).toBeGreaterThan(1)
            await page.click(selectors.SEARCH_FOR_VIAS)
            await page.click('#simple-popper ul li')
            // await page.type(selectors.SEARCH_FOR_VIAS, path_builder_via)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)


            // await page.waitForSelector(selectors.CHECKBOX_ITEM)
            // const searched_vias = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            // expect(searched_vias).toBe(1)
            // await page.waitForSelector(selectors.FIRST_SEARCHED_ELEMENT)
            // await page.click(selectors.FIRST_SEARCHED_ELEMENT)
            // await page.click(selectors.VIAS_FIELD)

            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR)
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForTimeout(3000)
            const added_via = await page.$$eval('form[class="vias"] > div > div > div > div > div > div > tr > td.MuiTableCell-root.MuiTableCell-sizeMedium.inLineForm:nth-child(2) > div > div > div > div:nth-child(3) > div > div > div > span > div', status => {
                return status.map(status => status.innerText)
            })
            expect(added_via).not.toHaveLength(0)
            console.log('Via added')

        })

        it('Add Destination', async () => {

            console.log('Adding Destination ...')
            await page.waitForTimeout(3000)

            //Destination
            await page.waitForSelector(selectors.DESTINATION_FROM_FIELD)
            await page.click(selectors.DESTINATION_FROM_FIELD)
            await page.waitForSelector(selectors.SEARCH_FOR_DESTINATIONS)
            await page.click(selectors.SEARCH_FOR_DESTINATIONS)
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.waitForSelector('#simple-popper ul li', {hidden:false})
            await page.click('#simple-popper ul li')
            await page.waitForTimeout(1000)
            await page.waitForSelector('#simple-popper ul li', {hidden:false})
            await page.click('#simple-popper ul li')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            // await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR)
            // await page.click(selectors.BIOTECH_ICON_SELECTOR)
            // await page.waitForTimeout(3000)
            // await page.waitForFunction((selector, expectedText) => {
            //     const elements = document.querySelectorAll(selector);
            //     return Array.from(elements, element => element.innerText).includes(expectedText);
            // }, { timeout: 15000 }, 'form[class="destinations"] > div > div > div > div > div > div > tr > td.MuiTableCell-root.MuiTableCell-sizeMedium.inLineForm:nth-child(1) > div > div > div > div:nth-child(3) > div > div > div > span > div', path_builder_via);

            const added_destination_from_field = await page.$$eval('form[class="destinations"] > div > div > div > div > div > div > tr > td.MuiTableCell-root.MuiTableCell-sizeMedium.inLineForm:nth-child(1) > div > div > div > div:nth-child(3) > div > div > div > span > div', status => {
                return status.map(status => status.innerText);
            });

            expect(added_destination_from_field).not.toHaveLength(0)

            await page.waitForSelector(selectors.FROM_FIELD)
            await page.click(selectors.FROM_FIELD)
            await page.waitForSelector(selectors.SEARCH_FOR_DESTINATIONS)
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.waitForTimeout(3000)
            const all_destinations = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            expect(all_destinations).toBeGreaterThan(1)
            await page.click(selectors.SEARCH_FOR_DESTINATIONS)
            await page.waitForSelector(selectors.CHECKBOX_ITEM)
            await page.waitForSelector('#simple-popper ul li', {hidden:false})
            await page.click('#simple-popper ul li')
            await page.waitForTimeout(1000)
            // await page.waitForSelector('#simple-popper ul li', {hidden:false})
            // await page.click('#simple-popper ul li')
            // await page.type(selectors.SEARCH_FOR_DESTINATIONS, path_builder_destination)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            // await page.waitForSelector(selectors.CHECKBOX_ITEM)
            // const searched_destination = await page.$$eval('.MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.PrivateSwitchBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium.MuiCheckbox-root.MuiCheckbox-colorPrimary.MuiCheckbox-sizeMedium', elements => elements.length);
            // expect(searched_destination).toBeGreaterThan(1)
            // await page.waitForSelector(selectors.FIRST_SEARCHED_ELEMENT)
            // await page.click(selectors.FIRST_SEARCHED_ELEMENT)
            // await page.click(selectors.FROM_FIELD)
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            // await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            // await page.waitForTimeout(3000)
            const added_destination = await page.$$eval('form[class="destinations"] > div > div > div > div > div > div > tr > td > div > div > div > div:nth-child(2) > div > div > div > span > div', status => {
                return status.map(status => status.innerText)
            })
            expect(added_destination).not.toHaveLength(0)

            console.log('Destination added')
        })


        it('Check Statement Preview', async () => {
            console.log('Checking Statement Preview ...')
            await page.waitForTimeout(3000)
            const h5divs = await page.$$('div.MuiStack-root:has(h5.MuiTypography-root.MuiTypography-h5)');
            const thirdDivTextContent = await page.evaluate(div => div.innerText, h5divs[2]);
            expect(thirdDivTextContent.length).toBeGreaterThan(8);

            console.log('Statement Preview filled')
        })

        it.skip('Reset Population Diagram', async () => {
            console.log('Checking Population Diagram ...')
            await page.waitForTimeout(1000)
            await page.waitForSelector('button[aria-label="Reset to default visualisation"]', {hidden:false})
            await page.click('button[aria-label="Reset to default visualisation"]')
            await page.waitForSelector('.MuiDialogActions-root.MuiDialogActions-spacing', {hidden:false})
            const buttons = await page.$$('.MuiDialogActions-root.MuiDialogActions-spacing button');
            await buttons[1].click();

            console.log('Population Diagram reset')
        })

        it('Check Population Diagram', async () => {
            console.log('Checking Population Diagram ...')
            await page.waitForTimeout(1000)
            await page.waitForSelector('button[aria-label="Reset to default visualisation"]', {hidden:false})
            await page.waitForSelector('div.node', {hidden:false})
            const nodes = await page.$$('div.node');
            //expect(nodes.length).toBe(3);
            expect(nodes.length).toBeGreaterThanOrEqual(1);

            
            console.log('Population Diagram correct')
        })

        it('Set status as To be Reviewed', async () => {
            console.log('Changing Status ...')

            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]', {hidden:false})
            await page.waitForSelector('#split-button-menu')
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(300)
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(2000)
            // await page.waitForFunction((selector, expectedText) => {
            //     const elements = document.querySelectorAll(selector);
            //     return Array.from(elements, element => element.innerText).includes(expectedText);
            // }, { timeout: 15000 }, 'span.MuiChip-label.MuiChip-labelSmall', "To be reviewed");

            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase());
            });

            expect(sentence_status).toContain("to be reviewed");
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR)
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForTimeout(2000)
            console.log('Status Changed')
        })

        it('Set status as NPO Approved', async () => {
            console.log('Changing Status ...')

            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]')
            await page.waitForSelector('#split-button-menu', {hidden:false})
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(1000)
            // await page.click(selectors.STATUS_DROPDOWN)
            // await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')
            // await page.evaluate(() => {
            //     [...document.querySelectorAll('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.MuiMenuItem-root.MuiMenuItem-gutters')].find(element => element.innerText === 'NPO approved').click();
            // });

            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(2000)
            // await page.waitForFunction((selector, expectedText) => {
            //     const elements = document.querySelectorAll(selector);
            //     return Array.from(elements, element => element.innerText).includes(expectedText);
            // }, { timeout: 15000 }, 'span.MuiChip-label.MuiChip-labelSmall', "NPO approved");

            const sentence_final_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase());
            });

            expect(sentence_final_status).toContain("npo approved");
            console.log('Status Changed')
        })
    })

    describe('Logout Flow', () => {

        it('Logout', async () => {
            console.log('Logging out ...')

            await page.waitForSelector(selectors.LOGOUT)
            await page.click(selectors.LOGOUT)
            await page.waitForSelector(selectors.LOGIN_PAGE, { timeout: 60000 })
            expect(page.url()).toContain('orcid.org/signin')
            console.log('User logged out')
        })
    })

})