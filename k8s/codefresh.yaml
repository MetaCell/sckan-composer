version: "1.0"
stages:
  - clone
  - buildComposer
  - buildNginx
  - deploy
  - notify
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: clone
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    git: github
  buildComposer:
    title: "Building SCKAN Composer Docker Image"
    type: build
    stage: buildComposer
    buildkit: true
    image_name: "sckan/composer"
    tag: "${{CF_SHORT_REVISION}}"
    dockerfile: Dockerfile
    registry: ${{REGISTRY}}
  buildNginx:
    title: "Building SCKAN nginx Docker Image"
    type: build
    stage: buildNginx
    buildkit: true
    build_arguments:
      - COMPOSER=us.gcr.io/metacellllc/sckan/composer:${{CF_SHORT_REVISION}}
    image_name: "sckan/nginx"
    tag: "${{CF_SHORT_REVISION}}"
    dockerfile: ./nginx/Dockerfile
    registry: ${{REGISTRY}}
  deploy-to-kubernetes:
    image: codefresh/cf-deploy-kubernetes
    tag: latest
    stage: deploy
    working_directory: ./k8s
    commands:
      - /cf-deploy-kubernetes postgres.yaml
      - /cf-deploy-kubernetes composer.yaml
      - /cf-deploy-kubernetes nginx.yaml
      - /cf-deploy-kubernetes ingress.yaml
    environment:
      - KUBECONTEXT=${{CLUSTER}}
      - KUBERNETES_NAMESPACE=${{NAMESPACE}}
  # slackNotify:
  #   image: byrnedo/alpine-curl
  #   stage: notify
  #   commands:
  #     - "curl -X POST -H 'Content-type: application/json' --data \"{\\\"text\\\":\\\"= ${CLUSTER} = Deployed ${CF_BRANCH}\\\"}\" ${{SLACK_WEBHOOK}}"
