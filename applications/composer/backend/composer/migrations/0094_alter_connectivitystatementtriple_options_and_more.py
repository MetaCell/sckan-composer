# Generated by Django 4.1.13 on 2025-10-13 11:51

from django.db import migrations, models
import django.db.models.deletion


def migrate_free_text_to_new_model(apps, schema_editor):
    """
    Migrate free_text data from ConnectivityStatementTriple to ConnectivityStatementText.
    Only migrates records where free_text is not null/empty.
    """
    ConnectivityStatementTriple = apps.get_model("composer", "ConnectivityStatementTriple")
    ConnectivityStatementText = apps.get_model("composer", "ConnectivityStatementText")
    
    # Find all triples with free_text
    triples_with_text = ConnectivityStatementTriple.objects.filter(
        free_text__isnull=False
    ).exclude(free_text='')
    
    # Create new ConnectivityStatementText records
    text_records = []
    for triple in triples_with_text:
        text_records.append(
            ConnectivityStatementText(
                connectivity_statement=triple.connectivity_statement,
                relationship=triple.relationship,
                text=triple.free_text
            )
        )
    
    # Bulk create the new records
    if text_records:
        ConnectivityStatementText.objects.bulk_create(text_records)
    
    # Delete the original triple records that had free_text (they're now in the new model)
    triples_with_text.delete()


def migrate_free_text_back_to_old_model(apps, schema_editor):
    """
    Reverse migration: move text data back to ConnectivityStatementTriple.
    """
    ConnectivityStatementTriple = apps.get_model("composer", "ConnectivityStatementTriple")
    ConnectivityStatementText = apps.get_model("composer", "ConnectivityStatementText")
    
    # Find all text records
    text_records = ConnectivityStatementText.objects.all()
    
    # Create ConnectivityStatementTriple records with free_text
    triple_records = []
    for text_record in text_records:
        triple_records.append(
            ConnectivityStatementTriple(
                connectivity_statement=text_record.connectivity_statement,
                relationship=text_record.relationship,
                free_text=text_record.text,
                triple=None  # free_text records don't have a triple
            )
        )
    
    # Bulk create the triple records
    if triple_records:
        ConnectivityStatementTriple.objects.bulk_create(triple_records)
    
    # Delete the text records (they're back in triples)
    text_records.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("composer", "0093_alter_expertconsultant_uri_alter_provenance_uri"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="connectivitystatementtriple",
            options={"verbose_name_plural": "Connectivity Statement Triples"},
        ),
        migrations.AlterField(
            model_name="connectivitystatementtriple",
            name="connectivity_statement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="composer.connectivitystatement",
            ),
        ),
        migrations.AlterField(
            model_name="relationship",
            name="type",
            field=models.CharField(
                choices=[
                    ("single", "Triple - Single select"),
                    ("multi", "Triple - Multi select"),
                    ("text", "Text area"),
                    ("anatomical_multi", "Anatomical Entity - Multi select"),
                ],
                max_length=20,
            ),
        ),
        
        # Create the new ConnectivityStatementText model
        migrations.CreateModel(
            name="ConnectivityStatementText",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                (
                    "connectivity_statement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.connectivitystatement",
                    ),
                ),
                (
                    "relationship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.relationship",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Connectivity Statement Texts",
            },
        ),
        migrations.AddConstraint(
            model_name="connectivitystatementtext",
            constraint=models.UniqueConstraint(
                fields=("connectivity_statement", "relationship"),
                name="unique_statement_relationship_text",
            ),
        ),
        
        # Migrate free_text data to the new model BEFORE removing the field
        migrations.RunPython(
            migrate_free_text_to_new_model,
            migrate_free_text_back_to_old_model,
        ),
        
        # Now it's safe to remove the free_text field
        migrations.RemoveField(
            model_name="connectivitystatementtriple",
            name="free_text",
        ),
        
        # Create ConnectivityStatementAnatomicalEntity model
        migrations.CreateModel(
            name="ConnectivityStatementAnatomicalEntity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "anatomical_entities",
                    models.ManyToManyField(
                        blank=True,
                        related_name="statement_relationships",
                        to="composer.anatomicalentity",
                    ),
                ),
                (
                    "connectivity_statement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.connectivitystatement",
                    ),
                ),
                (
                    "relationship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.relationship",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Connectivity Statement Anatomical Entities",
            },
        ),
        migrations.AddConstraint(
            model_name="connectivitystatementanatomicalentity",
            constraint=models.UniqueConstraint(
                fields=("connectivity_statement", "relationship"),
                name="unique_statement_relationship_anatomical",
            ),
        ),
    ]
