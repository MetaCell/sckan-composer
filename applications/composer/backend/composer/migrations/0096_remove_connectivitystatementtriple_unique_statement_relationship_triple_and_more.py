# Generated by Django 4.1.13 on 2025-10-13 12:21

from django.db import migrations, models


def migrate_triple_to_triples_forward(apps, schema_editor):
    """
    Migrate data from triple ForeignKey to triples ManyToMany field.
    For each ConnectivityStatementTriple with a triple, add that triple to the new triples M2M field.
    """
    ConnectivityStatementTriple = apps.get_model("composer", "ConnectivityStatementTriple")
    
    # Get all records that have a triple set
    for statement_triple in ConnectivityStatementTriple.objects.filter(triple__isnull=False):
        # Add the single triple to the M2M field
        statement_triple.triples.add(statement_triple.triple)


def migrate_triple_to_triples_backward(apps, schema_editor):
    """
    Reverse migration: move first triple from triples M2M back to triple FK.
    """
    ConnectivityStatementTriple = apps.get_model("composer", "ConnectivityStatementTriple")
    
    # For each record with triples, set the triple FK to the first one
    for statement_triple in ConnectivityStatementTriple.objects.all():
        first_triple = statement_triple.triples.first()
        if first_triple:
            statement_triple.triple = first_triple
            statement_triple.save(update_fields=["triple"])


class Migration(migrations.Migration):

    dependencies = [
        ("composer", "0095_alter_relationship_type"),
    ]

    operations = [
        # Step 1: Add the new ManyToMany field (triples) while keeping the old FK field
        migrations.AddField(
            model_name="connectivitystatementtriple",
            name="triples",
            field=models.ManyToManyField(
                blank=True,
                related_name="statement_triple_relationships",
                to="composer.triple",
            ),
        ),
        
        # Step 2: Migrate data from triple FK to triples M2M
        migrations.RunPython(
            migrate_triple_to_triples_forward,
            migrate_triple_to_triples_backward,
        ),
        
        # Step 3: Remove the old constraint that includes triple field
        migrations.RemoveConstraint(
            model_name="connectivitystatementtriple",
            name="unique_statement_relationship_triple",
        ),
        
        # Step 4: Remove the old triple ForeignKey field
        migrations.RemoveField(
            model_name="connectivitystatementtriple",
            name="triple",
        ),
        
        # Step 5: Add the new unique constraint (without triple field)
        migrations.AddConstraint(
            model_name="connectivitystatementtriple",
            constraint=models.UniqueConstraint(
                fields=("connectivity_statement", "relationship"),
                name="unique_statement_relationship_triple",
            ),
        ),
    ]
