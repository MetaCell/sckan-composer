//IMPORTS:
const selectors = require('./selectors');
const puppeteer = require("puppeteer");

// INFO
const USERNAME = process.env.TEST_USERNAME
const PASSWORD = process.env.TEST_PASSWORD  
const baseURL = 'https://composer.sckan.dev.metacell.us/'



//FUNCTIONS AND CONSTANTS

function getTimestamp() {
    const now = new Date();
    const day = now.getDate();
    const month = now.toLocaleString('default', { month: 'short' });
    const year = now.getFullYear();
    const hours = now.getHours();
    // const minutes = now.getMinutes();
    // const seconds = now.getSeconds();
    const formattedDate = `${day}${month}${year}_${hours}h`;
    return formattedDate
}

const maxPmidNumber = 99999999;
const randomPmid = Math.floor(Math.random() * maxPmidNumber) + 1;

const maxPmcidNumber = 999999999;
const randomPmcid = Math.floor(Math.random() * maxPmcidNumber) + 1;

const prefix = "10.";
const maxDoiLength = 16;
const characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

let doi = prefix;
while (doi.length < maxDoiLength) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    doi += characters[randomIndex];
}

const currentTime = getTimestamp()

const article_title = `Automated Testing Article - ${currentTime}`
const sentence = `QA - ${currentTime} - Sentence generated by Automated Testing`
const knowledge_statement_1 = `Testing_KS - ${currentTime}`
const provenances_1 = 'https://doi.org/google.com'
const species_1 = 'homo sapiens'
const apinatomy_model_name_1 = 'PTcell'
const additional_info_1 = 'Additional Information for KS 1'
const tags = 'Important'
const note = 'Statement List - Distillation - Note'
const path_builder_origin_ = 'abducens motor nuclei'
const path_builder_axon = 'AXON'
const path_builder_via = '10n'
const path_builder_destination = 'adrenal cortex'
const path_builder_axon_terminal = 'AXON-T'



//TESTS:

jest.setTimeout(60000 * 2);
let page;
let browser;


describe('End to End Tests', () => {

    beforeAll(async () => {

        browser = await puppeteer.launch({
            args: [
                '--no-sandbox', '--disable-setuid-sandbox', '--bail',
            ],
            headless: 'new',
            // headless: false,
            defaultViewport: {
                width: 1600,
                height: 1000,
            },
            // slowMo: 30
        });


        page = await browser.newPage();
        await console.log(
            "Checking page",
            baseURL
        );
        await console.log('Starting tests ...')

        await page.goto(baseURL, { waitUntil: 'domcontentloaded' })
        const pageTitle = await page.title();
        console.log(pageTitle);
        expect(pageTitle).toBe('SCKAN Composer')
    });

    afterAll(async () => {

        await browser.close()
    })

    describe('Login Flow', () => {

        // (shouldSkipLoginTest ? it.skip : it)('HomePage', async () => {
        it('Home Page', async () => {
            console.log('Homepage')
            await page.waitForSelector(selectors.LOGIN_PAGE, { timeout: 60000 })
            await page.waitForSelector(selectors.COOKIE_MODAL, { timeout: 60000 })
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { timeout: 60000 })
            await page.click(selectors.ACCEPT_COOKIES)
            await page.waitForSelector(selectors.ACCEPT_COOKIES, { hidden: true });
            console.log('Cookies accepted')

        });

        // (shouldSkipLoginTest ? it.skip : it)('Login', async () => {
        it('Login', async () => {
            console.log('Logging in ...');
            console.log('Testing user: ' + USERNAME)
    
            await page.waitForSelector(selectors.USERNAME, { hidden: false});
            await page.waitForTimeout(1000)
            await page.type(selectors.USERNAME, USERNAME);
            await page.type(selectors.PASSWORD, PASSWORD);
            await page.waitForSelector(selectors.SIGN_IN_BUTTON, { hidden: false });
            await page.click(selectors.SIGN_IN_BUTTON);
            await page.waitForSelector(selectors.SEARCH_ICON, { hidden: false });
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
    
            console.log('Logged In');
        });
    })

    describe('Sentence List', () => {

        it('Add Record', async () => {
            console.log('Adding record ...')

            await page.waitForSelector(selectors.ADD_RECORD, {hidden:false})
            await page.click(selectors.ADD_RECORD)
            await page.waitForSelector(selectors.ARTICLE_LABEL, {hidden:false})
            await page.click(selectors.ARTICLE_FIELD)
            await page.type(selectors.ARTICLE_FIELD, `${article_title}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.PMID_FIELD)
            await page.type(selectors.PMID_FIELD, `${randomPmid}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.PMCID_FIELD)
            await page.type(selectors.PMCID_FIELD, `${randomPmcid}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.DOI_FIELD)
            await page.type(selectors.DOI_FIELD, `${doi}`)
            await page.waitForTimeout(3000)
            await page.click(selectors.SENTENCE_FIELD)
            await page.type(selectors.SENTENCE_FIELD, `${sentence}`)
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.CREATE_SENTENCE, {hidden:false})
            await page.click(selectors.CREATE_SENTENCE)

            await page.waitForSelector(selectors.SENTENCE_DETAILS_TITLE, {hidden:false})
            await page.waitForTimeout(3000)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText)
            })
            expect(sentence_status).toContain("Open")

            console.log('Record successfully added')

        })


        it('Create 1st Knowledge Statement', async () => {
            console.log('Creating Knowledge Statement ...')

            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.ADD_KNOWLEDGE_STATEMENT, {hidden:false})
            await page.click(selectors.ADD_KNOWLEDGE_STATEMENT)

            // Knowledge Statement
            await page.waitForSelector(selectors.KS_FIELD, { timeout: 6000 })
            await page.click(selectors.KS_FIELD)
            await page.type(selectors.KS_FIELD, knowledge_statement_1)
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForTimeout(3000)

        })

        it('Add Provenance', async () => {
            //Provenance
            await page.waitForSelector(selectors.PROVENANCE_FIELD, {hidden:false})
            await page.click(selectors.PROVENANCE_FIELD)
            await page.type(selectors.PROVENANCE_FIELD, provenances_1)
            await page.keyboard.press('Enter')
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForTimeout(1000)
          

        })

        it('Add Species to KS', async () => {

            //Species
            await page.waitForSelector(selectors.SPECIES_FIELD, {hidden:false})
            await page.click(selectors.SPECIES_FIELD)
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
           
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Phenotype to KS', async () => {

            //Phenotype
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[3].click()
           
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Projection phenotype to KS', async () => {

            //Projection Phenotype
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[4].click()
           
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Laterality to KS', async () => {
            //Laterality
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[5].click()
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Projection Laterality to KS', async () => {
            //Projection laterality
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[6].click()
           
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Circuit Type to KS', async () => {
            // Circuit Type
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[7].click()
           
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })


        it('Add Sex to KS', async () => {
            // Sex 
            const statement_details_fields = await page.$$('div.MuiInputBase-root.MuiOutlinedInput-root.MuiInputBase-colorPrimary.MuiInputBase-formControl')
            await statement_details_fields[8].click()
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
        })

        it('Add Apinatomy model to KS', async () => {

            // Apinatomy Model Name
            await page.waitForSelector(selectors.APINATOMY_MODEL, {hidden:false})
            await page.click(selectors.APINATOMY_MODEL)
            await page.type(selectors.APINATOMY_MODEL, apinatomy_model_name_1)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)
        })

        it('Add Additional info to KS', async () => {
            // Additional Information
            await page.waitForSelector(selectors.ADDITIONAL_INFORMATION)
            await page.click(selectors.ADDITIONAL_INFORMATION)
            await page.type(selectors.ADDITIONAL_INFORMATION, additional_info_1)
            await page.waitForSelector(selectors.BIOTECH_ICON_SELECTOR, {hidden:false})
            await page.click(selectors.BIOTECH_ICON_SELECTOR)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)

            console.log('Knowledge Statement created')

        })


        it('Change status -> Ready to Compose', async () => {
            console.log('Changing Status ...')

            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]')
            await page.waitForSelector('#split-button-menu', {hidden:false})
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(100)
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForTimeout(1000)
            console.log('Status Changed')

        })


        it('Search for created Record', async () => {
            console.log('Searching for created Record ...')

            await page.waitForTimeout(3000)
            await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected')
            await page.waitForSelector('ul.MuiList-root.MuiList-padding > li')
            const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
            await sidebar_buttons[0].click()
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            await page.waitForSelector(selectors.SEARCH_ICON)
            await page.waitForSelector(selectors.SEARCH_BAR, {hidden:false})
            await page.click(selectors.SEARCH_BAR)
            await page.waitForTimeout(1000)
            await page.type(selectors.SEARCH_BAR, `${article_title}`)
            await page.waitForTimeout(3000)
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            // await page.waitForTimeout(6000)
            const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
            expect(searched_records_count).not.toBeNull

            await page.waitForSelector(selectors.TABLE_ROW)
            await page.click(selectors.TABLE_ROW)

            await page.waitForSelector(selectors.SENTENCE_PAGE)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase())
            })
            expect(sentence_status).toContain("ready to compose")

            console.log('Record found')
        })

        it('Set status as Compose Now', async () => {
            await page.waitForSelector(selectors.STATUS_BUTTON, {hidden:false})
            await page.waitForSelector('button[aria-label="select merge strategy"]', {hidden:false})
            await page.click('button[aria-label="select merge strategy"]', {hidden:false})
            await page.waitForTimeout(100)
            await page.waitForSelector('#split-button-menu')
            await page.keyboard.press('ArrowDown');
            await page.keyboard.press('Enter')
            await page.waitForTimeout(100)
            await page.click(selectors.STATUS_BUTTON)
            await page.waitForSelector(selectors.PROGRESS_LOADER, { timeout: 5000, hidden: false });
            await page.waitForSelector(selectors.PROGRESS_LOADER, { hidden: true });
            await page.waitForTimeout(3000)

            console.log('Status Changed')
        })

        it('Check status', async () => {
            console.log('Checking status change ...')

            await page.waitForSelector('li.MuiButtonBase-root.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected.MuiMenuItem-root.MuiMenuItem-gutters.Mui-selected')
            await page.waitForSelector('ul.MuiList-root.MuiList-padding > li')
            const sidebar_buttons = await page.$$('ul.MuiList-root.MuiList-padding > li')
            await sidebar_buttons[0].click()
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            await page.waitForSelector(selectors.SEARCH_ICON)
            await page.waitForSelector(selectors.SEARCH_BAR, {hidden:false})
            // await page.click(selectors.SEARCH_BAR)
            // await page.waitForTimeout(1000)
            // await page.type(selectors.SEARCH_BAR, `${article_title}`)
            await page.waitForTimeout(3000)
            await page.waitForSelector('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight')
            // await page.waitForTimeout(6000)
            const searched_records_count = await page.$$eval('.MuiDataGrid-row.MuiDataGrid-row--dynamicHeight', elements => elements.length);
            expect(searched_records_count).not.toBeNull

            await page.waitForSelector(selectors.TABLE_ROW)
            await page.click(selectors.TABLE_ROW)

            await page.waitForSelector(selectors.SENTENCE_PAGE)
            const sentence_status = await page.$$eval('span.MuiChip-label.MuiChip-labelSmall', status => {
                return status.map(status => status.innerText.toLowerCase())
            })
            expect(sentence_status).toContain("compose now")

            console.log('Record found')
        })
    })

})