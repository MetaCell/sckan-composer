# Generated by Django 4.1.4 on 2024-03-13 17:18

from django.db import migrations


def deduplicate_anatomical_entities(apps, schema_editor):
    AnatomicalEntity = apps.get_model('composer', 'AnatomicalEntity')
    Synonym = apps.get_model('composer', 'Synonym')

    unique_uris = {}

    for entity in AnatomicalEntity.objects.all().order_by('id'):
        if entity.ontology_uri in unique_uris:
            # If the ontology_uri is a duplicate, move this entity to Synonym
            primary_entity = AnatomicalEntity.objects.get(id=unique_uris[entity.ontology_uri])
            Synonym.objects.create(anatomical_entity=primary_entity, alias=entity.name)
            entity.delete()
        else:
            # Update the name of the anatomical entity to be the same as the ontology_uri
            # Since we don't have the  rdfs label this will make it clear that the anatomical entity needs curation
            entity.name = entity.ontology_uri
            entity.save()
            unique_uris[entity.ontology_uri] = entity.id


class Migration(migrations.Migration):
    dependencies = [
        ("composer", "0041_synonym"),
    ]

    operations = [
        migrations.RunPython(deduplicate_anatomical_entities),
    ]
