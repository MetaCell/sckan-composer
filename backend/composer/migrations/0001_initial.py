# Generated by Django 4.1.4 on 2023-01-11 16:58

import django.db.models.deletion
import django_fsm
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AnatomicalEntity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200, unique=True)),
                ("ontology_uri", models.URLField()),
            ],
            options={
                "verbose_name_plural": "Anatomical Entities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AnsDivision",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                "verbose_name_plural": "ANS Divisions",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ConnectivityStatement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("knowledge_statement", models.TextField(db_index=True)),
                (
                    "state",
                    django_fsm.FSMField(default="draft", max_length=50, protected=True),
                ),
                (
                    "destination_type",
                    models.CharField(
                        choices=[
                            ("AXON-SE", "Axon sensory ending"),
                            ("AXON-T", "Axon terminal"),
                            ("AXON-ST", "Axon sensory terminal"),
                            ("UNKNOW", "Not specified"),
                        ],
                        default="UNKNOW",
                        max_length=10,
                    ),
                ),
                (
                    "laterality",
                    models.CharField(
                        choices=[
                            ("IPSI", "Ipsi"),
                            ("ONTRAT", "Contrat"),
                            ("BI", "Bilateral"),
                            ("UNKNOWN", "Not specified"),
                        ],
                        default="UNKNOWN",
                        max_length=20,
                    ),
                ),
                (
                    "circuit_type",
                    models.CharField(
                        choices=[
                            ("SENSORY", "Sensory"),
                            ("MOTOR", "Motor"),
                            ("INTRINSIC", "Intrinsic"),
                            ("PROJECTION", "Projection"),
                            ("ANAXONIC", "Anaxonic"),
                            ("UNKNOWN", "Not specified"),
                        ],
                        default="UNKNOWN",
                        max_length=20,
                    ),
                ),
                (
                    "biological_sex",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "apinatomy_model",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "ans_division",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="composer.ansdivision",
                        verbose_name="ANS Division",
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="destination",
                        to="composer.anatomicalentity",
                        verbose_name="Destination",
                    ),
                ),
                (
                    "origin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="origin",
                        to="composer.anatomicalentity",
                        verbose_name="Origin",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Curator",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Connectivity Statements",
                "ordering": ["knowledge_statement"],
            },
        ),
        migrations.CreateModel(
            name="Specie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                "verbose_name_plural": "Species",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag", models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                "verbose_name_plural": "Tags",
                "ordering": ["tag"],
            },
        ),
        migrations.CreateModel(
            name="Via",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ordering", models.PositiveIntegerField(default=0)),
                (
                    "anatomical_entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="composer.anatomicalentity",
                    ),
                ),
                (
                    "connectivity_statement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.connectivitystatement",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Via",
                "ordering": ["ordering"],
            },
        ),
        migrations.CreateModel(
            name="Sentence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(db_index=True, max_length=200)),
                ("text", models.TextField(db_index=True)),
                (
                    "state",
                    django_fsm.FSMField(default="open", max_length=50, protected=True),
                ),
                ("pmid", models.BigIntegerField(blank=True, db_index=True, null=True)),
                (
                    "pmcid",
                    models.CharField(
                        blank=True, db_index=True, max_length=10, null=True
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Triage Operator",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, to="composer.tag", verbose_name="Tags"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Sentences",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_triage_operator", models.BooleanField(default=False)),
                ("is_curator", models.BooleanField(default=False)),
                ("is_reviewer", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("note", models.TextField()),
                (
                    "connectivity_statement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="composer.connectivitystatement",
                        verbose_name="Connectivity Statement",
                    ),
                ),
                (
                    "sentence",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="notes",
                        to="composer.sentence",
                        verbose_name="Sentence",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Notes",
                "ordering": ["note"],
            },
        ),
        migrations.CreateModel(
            name="Doi",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("doi", models.CharField(max_length=200)),
                (
                    "connectivity_statement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="composer.connectivitystatement",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "D.O.I.s",
                "ordering": ["doi"],
            },
        ),
        migrations.AddField(
            model_name="connectivitystatement",
            name="path",
            field=models.ManyToManyField(
                blank=True, through="composer.Via", to="composer.anatomicalentity"
            ),
        ),
        migrations.AddField(
            model_name="connectivitystatement",
            name="sentence",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="composer.sentence",
                verbose_name="Sentence",
            ),
        ),
        migrations.AddField(
            model_name="connectivitystatement",
            name="species",
            field=models.ManyToManyField(
                blank=True, to="composer.specie", verbose_name="Species"
            ),
        ),
        migrations.AddField(
            model_name="connectivitystatement",
            name="tags",
            field=models.ManyToManyField(
                blank=True, to="composer.tag", verbose_name="Tags"
            ),
        ),
        migrations.AddConstraint(
            model_name="sentence",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "state__in",
                        [
                            "open",
                            "to_be_reviewed",
                            "compose_later",
                            "compose_now",
                            "excluded",
                            "duplicate",
                        ],
                    )
                ),
                name="sentence_state_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="sentence",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("pmid__isnull", False), ("pmcid__isnull", False), _connector="OR"
                ),
                name="sentence_pmid_pmcd_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="note",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("connectivity_statement__isnull", True),
                        ("sentence__isnull", False),
                    ),
                    models.Q(
                        ("connectivity_statement__isnull", False),
                        ("sentence__isnull", True),
                    ),
                    _connector="OR",
                ),
                name="only_sentence_or_connectivity_statement",
            ),
        ),
        migrations.AddConstraint(
            model_name="connectivitystatement",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "state__in",
                        [
                            "draft",
                            "compose_now",
                            "curated",
                            "excluded",
                            "rejected",
                            "to_be_reviewed",
                            "connection_missing",
                            "npo_approved",
                            "approved",
                        ],
                    )
                ),
                name="state_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="connectivitystatement",
            constraint=models.CheckConstraint(
                check=models.Q(("laterality__in", ["IPSI", "ONTRAT", "BI", "UNKNOWN"])),
                name="laterality_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="connectivitystatement",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "circuit_type__in",
                        [
                            "SENSORY",
                            "MOTOR",
                            "INTRINSIC",
                            "PROJECTION",
                            "ANAXONIC",
                            "UNKNOWN",
                        ],
                    )
                ),
                name="circuit_type_valid",
            ),
        ),
    ]
