# Generated by Django 4.1.4 on 2024-07-17 13:50

from django.db import migrations
from django.db.models import Count


def remove_duplicate_layers(apps, schema_editor):
    Layer = apps.get_model('composer', 'Layer')
    duplicates = (
        Layer.objects
        .values('ae_meta_id')
        .annotate(count_id=Count('layer_id'))
        .filter(count_id__gt=1)
    )

    for duplicate in duplicates:
        layers = Layer.objects.filter(ae_meta_id=duplicate['ae_meta_id']).order_by('layer_id')
        layers_to_delete = layers[1:]  # Keep the first occurrence, delete the rest
        for layer in layers_to_delete:
            layer.delete()


def remove_duplicate_regions(apps, schema_editor):
    Region = apps.get_model('composer', 'Region')
    duplicates = (
        Region.objects
        .values('ae_meta_id')
        .annotate(count_id=Count('region_id'))
        .filter(count_id__gt=1)
    )

    for duplicate in duplicates:
        regions = Region.objects.filter(ae_meta_id=duplicate['ae_meta_id']).order_by('region_id')
        regions_to_delete = regions[1:]  # Keep the first occurrence, delete the rest
        for region in regions_to_delete:
            region.delete()


def remove_duplicate_intersections(apps, schema_editor):
    AnatomicalEntityIntersection = apps.get_model('composer', 'AnatomicalEntityIntersection')
    duplicates = (
        AnatomicalEntityIntersection.objects
        .values('layer_id', 'region_id')
        .annotate(count_id=Count('id'))
        .filter(count_id__gt=1)
    )

    for duplicate in duplicates:
        intersections = AnatomicalEntityIntersection.objects.filter(
            layer_id=duplicate['layer_id'],
            region_id=duplicate['region_id']
        ).order_by('id')
        intersections_to_delete = intersections[1:]  # Keep the first occurrence, delete the rest
        for intersection in intersections_to_delete:
            intersection.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("composer", "0057_remove_connectivitystatement_projection_valid_and_more"),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_layers),
        migrations.RunPython(remove_duplicate_regions),
        migrations.RunPython(remove_duplicate_intersections),
    ]
