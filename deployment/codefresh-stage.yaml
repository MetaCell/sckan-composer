version: '1.0'
stages:
- prepare
- build
- deploy
- qa
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
      clone_cloud_harness:
        title: Cloning cloud-harness repository...
        type: git-clone
        stage: prepare
        repo: https://github.com/MetaCell/cloud-harness.git
        revision: '${{CLOUDHARNESS_BRANCH}}'
        working_directory: .
        git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.12
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment cloud-harness . -t ${{DEPLOYMENT_TAG}} -d ${{DOMAIN}} -r
      ${{REGISTRY}} -rs ${{REGISTRY_SECRET}} -n ${{NAMESPACE}} -e stage -i composer
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAMESPACE}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: '${{NAMESPACE}}'
      kube_context: '${{CLUSTER_NAME}}'
      namespace: '${{NAMESPACE}}'
      chart_version: '${{DEPLOYMENT_TAG}}'
      cmd_ps: --wait --timeout 600s --create-namespace
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values:
      - apps_composer_harness_secrets_SECRET__KEY=${{SECRET__KEY}}
      - apps_composer_harness_secrets_SOCIAL__AUTH__ORCID__SECRET=${{SOCIAL__AUTH__ORCID__SECRET}}
  manual_tests:
    type: pending-approval
    stage: publish
    title: Manual tests performed
    description: Manual tests have been performed and reported
    timeout:
      duration: 168
      finalState: approved
  approval:
    type: pending-approval
    stage: publish
    title: Approve release
    description: Approve release and tagging/publication
    timeout:
      duration: 168
      finalState: approved
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-frontend-build:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-base-debian:
        stage: publish
        type: push
        title: Cloudharness base debian
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-base-debian:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-django:
        stage: publish
        type: push
        title: Cloudharness django
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-django:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts:
        stage: publish
        type: push
        title: Accounts
        candidate: '${{REGISTRY}}/cloudharness/accounts:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_composer:
        stage: publish
        type: push
        title: Composer
        candidate: '${{REGISTRY}}/cloudharness/composer:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_composer-notify:
        stage: publish
        type: push
        title: Composer notify
        candidate: '${{REGISTRY}}/cloudharness/composer-notify:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
  git-tag:
    title: Performing git tagging
    stage: publish
    image: alpine/git:latest
    commands:
    - git tag ${{DEPLOYMENT_PUBLISH_TAG}}
    - ORIGIN=$(git remote get-url origin)
    - PROTOCOL=https://
    - REPLACEMENT=${PROTOCOL}${{REPO_TOKEN}}@
    - git remote set-url origin ${ORIGIN/$PROTOCOL/$REPLACEMENT}
    - git push origin --tags
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
          whenVarExists2: includes("${{REPO_TOKEN}}", "{{REPO_TOKEN}}") == false
